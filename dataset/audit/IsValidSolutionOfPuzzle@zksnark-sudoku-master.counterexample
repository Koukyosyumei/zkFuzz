╔══════════════════════════════════════════════════════════════╗
║🚨 Counter Example:                                           ║
║    🔥 UnderConstrained (Non-Deterministic) 🔥
║           ➡️ `main.result` is expected to be `1`
║    🔍 Assignment Details:
║           ➡️ main.puzzle[2] = -8
║           ➡️ main.result = 72
║           ➡️ main.puzzle[3] = 21888242871839275222246405745257275088548364400416034343698204186575808495611
║           ➡️ main.puzzle[0] = 21888242871839275222246405745257275088548364400416034343698204186575808495611
║           ➡️ main.solution[1] = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.solution[2] = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.solution[3] = 21888242871839275222246405745257275088548364400416034343698204186575808495611
║           ➡️ main.solution[0] = -6
║           ➡️ main.puzzle[1] = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.allNumbersAreEqualCheck.ands[0].and1.b = 21888242871839275222246405745257275088548364400416034343698204186575808495608
║           ➡️ main.allNumbersAreEqualCheck.out = 72
║           ➡️ main.equalCheck[0].out = 1
║           ➡️ main.allNumbersAreEqualCheck.ands[0].in[1] = 21888242871839275222246405745257275088548364400416034343698204186575808495608
║           ➡️ main.equalCheck[3].in[1] = 21888242871839275222246405745257275088548364400416034343698204186575808495611
║           ➡️ main.allNumbersAreEqualCheck.and2.b = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.equalCheck[0].in[0] = -6
║           ➡️ main.equalCheck[2].in[0] = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.allNumbersAreEqualCheck.ands[1].in[0] = 4
║           ➡️ main.equalCheck[1].out = 1
║           ➡️ main.equalCheck[0].isz.inv = -8
║           ➡️ main.equalCheck[1].isz.in = 0
║           ➡️ main.equalCheck[1].isz.out = 1
║           ➡️ main.allNumbersAreEqualCheck.ands[1].and1.out = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.equalCheck[3].isz.inv = -1
║           ➡️ main.allNumbersAreEqualCheck.in[1] = 21888242871839275222246405745257275088548364400416034343698204186575808495608
║           ➡️ main.equalCheck[1].in[1] = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.allNumbersAreEqualCheck.ands[1].and1.a = 4
║           ➡️ main.equalCheck[2].isz.in = 0
║           ➡️ main.allNumbersAreEqualCheck.in[2] = 4
║           ➡️ main.allNumbersAreEqualCheck.ands[1].and1.b = 21888242871839275222246405745257275088548364400416034343698204186575808495615
║           ➡️ main.equalCheck[2].isz.out = 1
║           ➡️ main.allNumbersAreEqualCheck.ands[0].in[0] = 1
║           ➡️ main.allNumbersAreEqualCheck.and2.a = 21888242871839275222246405745257275088548364400416034343698204186575808495608
║           ➡️ main.equalCheck[3].in[0] = 21888242871839275222246405745257275088548364400416034343698204186575808495611
║           ➡️ main.allNumbersAreEqualCheck.and2.out = 72
║           ➡️ main.allNumbersAreEqualCheck.ands[0].out = 21888242871839275222246405745257275088548364400416034343698204186575808495608
║           ➡️ main.allNumbersAreEqualCheck.ands[0].and1.out = 21888242871839275222246405745257275088548364400416034343698204186575808495608
║           ➡️ main.equalCheck[2].out = 1
║           ➡️ main.equalCheck[2].in[1] = -8
║           ➡️ main.equalCheck[0].isz.in = 0
║           ➡️ main.equalCheck[0].isz.out = 1
║           ➡️ main.equalCheck[0].in[1] = 21888242871839275222246405745257275088548364400416034343698204186575808495611
║           ➡️ main.allNumbersAreEqualCheck.in[0] = 1
║           ➡️ main.equalCheck[1].in[0] = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.equalCheck[1].isz.inv = 0
║           ➡️ main.equalCheck[3].isz.in = 0
║           ➡️ main.equalCheck[3].isz.out = 1
║           ➡️ main.allNumbersAreEqualCheck.in[3] = 21888242871839275222246405745257275088548364400416034343698204186575808495615
║           ➡️ main.equalCheck[3].out = 1
║           ➡️ main.allNumbersAreEqualCheck.ands[1].in[1] = 21888242871839275222246405745257275088548364400416034343698204186575808495615
║           ➡️ main.allNumbersAreEqualCheck.ands[0].and1.a = 1
║           ➡️ main.allNumbersAreEqualCheck.ands[1].out = 21888242871839275222246405745257275088548364400416034343698204186575808495609
║           ➡️ main.equalCheck[2].isz.inv = -4
╚══════════════════════════════════════════════════════════════╝